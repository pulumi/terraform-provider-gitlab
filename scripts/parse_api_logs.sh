#!/usr/bin/env bash

#
# This script can be used to filter out GitLab API calls made by `go-gitlab`.
# The stdin is expected to be in a jsonline format generated by Terraform.
# It can easily by generated by using the following environment variable
# setting:
# TF_LOG_PATH=$(pwd)/log.json TF_LOG=JSON make testacc ...
#
# The script is rather slow, but you can easily combine live-tail it:
# tail -f $(pwd)/log.json | ./scripts/parse_api_logs.sh
#
# You may also set `URI_REGEX` to a bash-compatible regular expression
# which is applied to the logs `tf_http_req_uri` field.
# E.g. filter for projects API endpoint requests:
# URI_REGEX='^/api/v4/projects' ./scripts/parse_api_logs.sh < ...
#

printed_requests=()
cat - | jq -R 'fromjson?' | jq -c '. | select(has("@module") and (."@module" | endswith(".GitLab")) and (."@message" == "Sending HTTP Request" or ."@message" == "Received HTTP Response"))' | while read -r record; do
  is_request=$(echo $record | jq -r ".tf_http_req_uri != null")
  trans_id=$(echo $record | jq -r ".tf_http_trans_id")
  if [[ $is_request == "true" ]]; then
    uri=$(echo $record | jq -r ".tf_http_req_uri")
    if [[ -z "$URI_REGEX" || "$uri" =~ $URI_REGEX ]]; then
      echo "==> $(echo $record | jq -r ".tf_http_req_method") $uri"
      echo "    TRANS-ID: $trans_id at $(echo $record | jq -r '."@timestamp"')"
      echo "    HTTP BODY:"
      echo $record | jq -r '.tf_http_req_body' | jq -C | sed 's/^/    /'
      printed_requests+=($trans_id)
    fi
  else
    if [[ " ${printed_requests[*]} " =~ " ${trans_id} " ]]; then
      echo "<== $(echo $record | jq -r ".tf_http_res_status_reason")"
          echo "    TRANS-ID: $trans_id at $(echo $record | jq -r '."@timestamp"')"
          echo "    HTTP BODY:"
          echo $record | jq -r '.tf_http_res_body' | jq -C | sed 's/^/    /'
    fi
  fi
done